"""
This is an automatically generated stub for `robot_daemon_protocol.capnp`.

This file was manually edited to work better with the code tools.

Added __init__ functions
Made `dict` into `dict[Any,Any]`
Formatted file with black
RoboServer
"""

from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Any, Iterator, Sequence

class Setupargs:
    version: str
    def __init__(self, version: str) -> None: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[SetupargsReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> SetupargsReader: ...
    @staticmethod
    def new_message() -> SetupargsBuilder: ...
    def to_dict(self) -> dict[Any, Any]: ...

class SetupargsReader(Setupargs):
    def as_builder(self) -> SetupargsBuilder: ...

class SetupargsBuilder(Setupargs):
    @staticmethod
    def from_dict(dictionary: dict[Any, Any]) -> SetupargsBuilder: ...
    def copy(self) -> SetupargsBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SetupargsReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SetupResponse:
    versionOk: bool
    def __init__(self, versionOk: bool) -> None: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[SetupResponseReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> SetupResponseReader: ...
    @staticmethod
    def new_message() -> SetupResponseBuilder: ...
    def to_dict(self) -> dict[Any, Any]: ...

class SetupResponseReader(SetupResponse):
    def as_builder(self) -> SetupResponseBuilder: ...

class SetupResponseBuilder(SetupResponse):
    @staticmethod
    def from_dict(dictionary: dict[Any, Any]) -> SetupResponseBuilder: ...
    def copy(self) -> SetupResponseBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SetupResponseReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PinControl:
    pin: int
    target: float
    def __init__(self, pin: int, target: float) -> None: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[PinControlReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> PinControlReader: ...
    @staticmethod
    def new_message() -> PinControlBuilder: ...
    def to_dict(self) -> dict[Any, Any]: ...

class PinControlReader(PinControl):
    def as_builder(self) -> PinControlBuilder: ...

class PinControlBuilder(PinControl):
    @staticmethod
    def from_dict(dictionary: dict[Any, Any]) -> PinControlBuilder: ...
    def copy(self) -> PinControlBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PinControlReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ControlCommands:
    pins: Sequence[PinControl | PinControlBuilder | PinControlReader]
    def __init__(
        self,
        pins: Sequence[PinControl | PinControlBuilder | PinControlReader],
    ) -> None: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[ControlCommandsReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> ControlCommandsReader: ...
    @staticmethod
    def new_message() -> ControlCommandsBuilder: ...
    def to_dict(self) -> dict[Any, Any]: ...

class ControlCommandsReader(ControlCommands):
    pins: Sequence[PinControlReader]
    def as_builder(self) -> ControlCommandsBuilder: ...

class ControlCommandsBuilder(ControlCommands):
    pins: Sequence[PinControl | PinControlBuilder | PinControlReader]
    @staticmethod
    def from_dict(dictionary: dict[Any, Any]) -> ControlCommandsBuilder: ...
    def copy(self) -> ControlCommandsBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ControlCommandsReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SensorReadings:
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[SensorReadingsReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> SensorReadingsReader: ...
    @staticmethod
    def new_message() -> SensorReadingsBuilder: ...
    def to_dict(self) -> dict[Any, Any]: ...

class SensorReadingsReader(SensorReadings):
    def as_builder(self) -> SensorReadingsBuilder: ...

class SensorReadingsBuilder(SensorReadings):
    @staticmethod
    def from_dict(dictionary: dict[Any, Any]) -> SensorReadingsBuilder: ...
    def copy(self) -> SensorReadingsBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SensorReadingsReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

# Defining the interface as any. The stub generator does not generate for interfaces yet.
RoboServer = Any
